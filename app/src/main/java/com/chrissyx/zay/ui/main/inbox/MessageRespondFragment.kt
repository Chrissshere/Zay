package com.chrissyx.zay.ui.main.inbox

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.widget.addTextChangedListener
import androidx.lifecycle.lifecycleScope
import com.chrissyx.zay.R
import com.chrissyx.zay.data.models.Message
import com.chrissyx.zay.data.repository.FirebaseRepository
import com.chrissyx.zay.databinding.FragmentMessageRespondBinding
import com.chrissyx.zay.utils.UserPreferences
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import kotlinx.coroutines.launch
import android.content.Context
import android.view.inputmethod.InputMethodManager

class MessageRespondFragment : BottomSheetDialogFragment() {

    private var _binding: FragmentMessageRespondBinding? = null
    private val binding get() = _binding!!
    
    private lateinit var firebaseRepository: FirebaseRepository
    private lateinit var userPreferences: UserPreferences
    private lateinit var originalMessage: Message
    private var isLoading = false

    companion object {
        private const val ARG_MESSAGE = "message"
        
        fun newInstance(message: Message): MessageRespondFragment {
            val fragment = MessageRespondFragment()
            val args = Bundle()
            args.putParcelable(ARG_MESSAGE, message)
            fragment.arguments = args
            return fragment
        }
    }

    override fun getTheme(): Int {
        return R.style.TransparentBottomSheetDialog
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentMessageRespondBinding.inflate(inflater, container, false)
        return binding.root
    }
    
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        
        // Get the original message from arguments
        originalMessage = arguments?.getParcelable(ARG_MESSAGE) ?: run {
            dismiss()
            return
        }
        
        firebaseRepository = FirebaseRepository()
        userPreferences = UserPreferences(requireContext())
        
        setupUI()
        setupMessageInput()
    }
    
    private fun setupUI() {
        // Display the original message
        binding.originalMessageText.text = originalMessage.text
        
        // Set up close button
        binding.closeButton.setOnClickListener {
            hideKeyboard()
            dismiss()
        }
        
        // Set up send button
        binding.sendButton.setOnClickListener {
            sendResponse()
        }
        
        // Initially disable send button
        binding.sendButton.isEnabled = false
    }
    
    private fun setupMessageInput() {
        binding.messageInput.addTextChangedListener { text ->
            val message = text.toString().trim()
            val hasContent = message.isNotEmpty()
            
            binding.sendButton.isEnabled = hasContent && !isLoading
        }
        
        // Focus on input and show keyboard
        binding.messageInput.requestFocus()
        showKeyboard()
    }
    
    private fun sendResponse() {
        val responseText = binding.messageInput.text.toString().trim()
        if (responseText.isEmpty() || isLoading) return
        
        isLoading = true
        updateSendButton()
        
        lifecycleScope.launch {
            try {
                val currentUser = userPreferences.username ?: ""
                
                // Create a response message
                val responseMessage = Message(
                    id = "", // Will be generated by Firebase
                    text = responseText,
                    timestamp = System.currentTimeMillis() / 1000.0,
                    sender = currentUser,
                    device = "" // Will be filled by Firebase
                )
                
                // Send response to the original sender
                val success = firebaseRepository.sendMessage(
                    recipientUsername = originalMessage.sender,
                    message = responseMessage
                )
                
                if (success) {
                    Toast.makeText(requireContext(), "Response sent successfully!", Toast.LENGTH_SHORT).show()
                    hideKeyboard()
                    dismiss()
                } else {
                    Toast.makeText(requireContext(), "Failed to send response", Toast.LENGTH_SHORT).show()
                }
                
            } catch (e: Exception) {
                Toast.makeText(requireContext(), "Error sending response: ${e.message}", Toast.LENGTH_SHORT).show()
            } finally {
                isLoading = false
                updateSendButton()
            }
        }
    }
    
    private fun updateSendButton() {
        val hasContent = binding.messageInput.text.toString().trim().isNotEmpty()
        binding.sendButton.isEnabled = hasContent && !isLoading
        binding.sendButton.text = if (isLoading) "Sending..." else "Send Response"
    }
    
    private fun showKeyboard() {
        val imm = requireContext().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.showSoftInput(binding.messageInput, InputMethodManager.SHOW_IMPLICIT)
    }
    
    private fun hideKeyboard() {
        val imm = requireContext().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(binding.messageInput.windowToken, 0)
    }
    
    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}